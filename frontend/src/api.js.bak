// frontend/src/api.js  (overwritten by dev-fallback patch)
import axios from "axios";

const BASE = import.meta.env.VITE_API_BASE || "http://localhost:8000";

let token = null;
export function setToken(t) { token = t; }

const client = axios.create({
  baseURL: BASE,
  // timeout: 5000,
});

client.interceptors.request.use(config => {
  if (token) {
    config.headers['Authorization'] = `Bearer ${token}`;
  }
  return config;
});

// Helper to try protected endpoint first, then fallback to public
async function tryWithFallback(protectedCall, publicUrl, opts = {}) {
  try {
    return await protectedCall();
  } catch (err) {
    // If unauthorized or other network error, attempt public endpoint fallback
    const status = err?.response?.status;
    if (!status || status === 401 || status === 403) {
      // fallback via direct axios (no auth header)
      return axios.get(BASE + publicUrl, opts);
    }
    // rethrow other errors
    throw err;
  }
}

export default {
  login: (username, password) => client.post("/auth/login", { username, password }),
  ingestStix: (file) => {
    const fd = new FormData();
    fd.append("file", file);
    return client.post("/ingest/stix", fd, { headers: { "Content-Type": "multipart/form-data" }});
  },
  ingestMisp: (file) => {
    const fd = new FormData();
    fd.append("file", file);
    return client.post("/ingest/misp", fd, { headers: { "Content-Type": "multipart/form-data" }});
  },
  search: (q) => tryWithFallback(
    () => client.get("/search", { params: { q } }),
    `/public/search?q=${encodeURIComponent(q)}`
  ),
  graph: (uid, depth=1) => tryWithFallback(
    () => client.get(`/graph/${encodeURIComponent(uid)}`, { params: { depth } }),
    `/public/graph/${encodeURIComponent(uid)}?depth=${encodeURIComponent(depth)}`
  ),
  mlAnomaly: (uid, depth=2) => tryWithFallback(
    () => client.get(`/ml/anomaly/${encodeURIComponent(uid)}`, { params: { depth } }),
    `/public/ml/anomaly/${encodeURIComponent(uid)}?depth=${encodeURIComponent(depth)}`
  ),
  mlCluster: (uid, depth=2) => tryWithFallback(
    () => client.get(`/ml/cluster/${encodeURIComponent(uid)}`, { params: { depth } }),
    `/public/ml/cluster/${encodeURIComponent(uid)}?depth=${encodeURIComponent(depth)}`
  )
};
